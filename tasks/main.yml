---
- name: Installing jenkins-job-builder
  pip:
    name: jenkins-job-builder
    virtualenv: /tmp/venv
    virtualenv_python: python2.7
    virtualenv_site_packages: false
  register: my_result
  until: my_result is succeeded
  retries: 5
  delay: 10
- name: Installing influxdb
  become: true
  pip:
    name: influxdb
  register: my_result
  until: my_result is succeeded
  retries: 5
  delay: 10
- name: Changing state of selinux
  selinux:
    policy: targeted
    state: permissive
  become: true
  when:
    - ansible_os_family == "RedHat"
- name: Starting Minio
  become: true
  docker_container:
    name: minio
    image: minio/minio
    pull: true
    recreate: true
    command: server /data
    env:
      MINIO_ACCESS_KEY: 'xtesting'
      MINIO_SECRET_KEY: 'xtesting'
    published_ports:
      - '{{ minio_port }}:9000'
    volumes:
      - '{{ prefix }}/minio:/data'
- name: Starting Jenkins
  become: true
  docker_container:
    name: jenkins
    image: ollivier/jenkins
    pull: true
    recreate: true
    published_ports:
      - '{{ jenkins_port }}:8080'
      - '{{ jenkins_jnlp_port }}:50000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - '{{ prefix }}/jenkins:/var/jenkins_home'
- name: Configuring Minio
  become: true
  command: docker exec jenkins {{ item }}
  with_items:
    - 'mc config host add minio http://{{ ipaddress }}:{{ minio_port }} xtesting xtesting'
    - 'mc mb -p minio/xtesting'
  register: exit_code
  changed_when: exit_code.rc == 0
- name: Waiting Jenkins
  pause:
    seconds: 30
- name: Creating jenkins_jobs.ini
  template:
    src: jenkins_jobs.ini.j2
    dest: /tmp/jenkins_jobs.ini
- name: Creating {{ project }}.yaml
  template:
    src: run.yaml.j2
    dest: /tmp/{{ project }}.yaml
- name: Loading Jenkins jobs
  command: |
    /tmp/venv/bin/jenkins-jobs --conf \
      /tmp/jenkins_jobs.ini update /tmp/{{ project }}.yaml
  register: exit_code
  changed_when: exit_code.rc == 0
- name: Starting S3www
  become: true
  docker_container:
    name: s3www
    image: ollivier/s3www
    pull: true
    recreate: true
    published_ports:
      - '{{ s3www_port }}:8080'
    env:
      ENDPOINT: http://{{ ipaddress }}:{{ minio_port }}
      ACCESSKEY: 'xtesting'
      SECRETKEY: 'xtesting'
      BUCKET: 'xtesting'
- name: Starting Docker Registry
  become: true
  docker_container:
    name: registry
    image: registry:2
    pull: true
    recreate: true
    published_ports:
      - '{{ registry_port }}:5000'
    volumes:
      - '{{ prefix }}/registry:/var/lib/registry'
- name: Starting MongoDB
  become: true
  docker_container:
    name: mongo
    image: mongo
    pull: true
    recreate: true
    published_ports:
      - '{{ mongo_port }}:27017'
    volumes:
      - '{{ prefix }}/mongodb:/data/db'
- name: Starting TestAPI
  become: true
  docker_container:
    name: testapi
    image: opnfv/testapi
    pull: true
    recreate: true
    published_ports:
      - '{{ testapi_port }}:8000'
    env:
      base_url: 'http://{{ ipaddress }}:{{ testapi_port }}'
      mongodb_url: mongodb://{{ ipaddress }}:{{ mongo_port }}/
      auth: 'false'
- name: Waiting TestAPI
  pause:
    seconds: 10
- name: Checking if pod is already registered
  uri:
    url: 'http://{{ ipaddress }}:{{ testapi_port }}/api/v1/pods/{{ project }}'
    status_code:
      - 200
      - 404
  register: http_response
- name: Registering the pod
  uri:
    url: 'http://{{ ipaddress }}:{{ testapi_port }}/api/v1/pods'
    method: POST
    body: {"name":"{{ project }}"}
    status_code: 200
    body_format: json
  when: http_response.status != 200
- name: Checking if project is already registered
  uri:
    url: 'http://{{ ipaddress }}:{{ testapi_port }}/api/v1/projects/{{ db_project }}'
    status_code:
      - 200
      - 404
  register: http_response
- name: Registering the project
  uri:
    url: 'http://{{ ipaddress }}:{{ testapi_port }}/api/v1/projects'
    method: POST
    body: {"name":"{{ db_project }}"}
    status_code: 200
    body_format: json
  when: http_response.status != 200
- name: Checking if testcase is already registered
  uri:
    url: 'http://{{ ipaddress }}:{{
      testapi_port }}/api/v1/projects/{{ db_project }}/cases/{{ item.1 }}'
    status_code:
      - 200
      - 404
  with_subelements:
    - '{{ suites }}'
    - 'tests'
  register: http_response
- name: Registering the testcases
  uri:
    url: 'http://{{ ipaddress }}:{{
      testapi_port }}/api/v1/projects/{{ db_project }}/cases'
    method: POST
    body: {"name":"{{ item.item.1 }}"}
    status_code: 200
    body_format: json
  when: item.status != 200
  with_items:
    - '{{ http_response.results }}'
- name: Starting InfluxDB
  become: true
  docker_container:
    name: influxdb
    image: influxdb
    pull: true
    recreate: true
    published_ports:
      - '{{ influxdb_port }}:8086'
    volumes:
      - '{{ prefix }}/influxdb:/var/lib/influxdb'
- name: Waiting InfluxDB
  pause:
    seconds: 10
- name: Creating InfluxDB database
  influxdb_database:
    hostname: '{{ ipaddress }}'
    port: '{{ influxdb_port }}'
    database_name: '{{ project }}'
- name: Creating {{ prefix }}/grafana
  file:
    path: '{{ prefix }}/grafana'
    state: directory
    mode: '0777'
- name: Starting Grafana
  become: true
  docker_container:
    name: grafana
    image: grafana/grafana
    pull: true
    recreate: true
    published_ports:
      - '{{ grafana_port }}:3000'
    volumes:
      - '{{ prefix }}/grafana:/var/lib/grafana'
- name: Waiting Grafana
  pause:
    seconds: 10
- name: Adding InfluxDB data source in Grafana
  grafana_datasource:
    name: 'influxdb'
    grafana_url: 'http://{{ ipaddress }}:{{ grafana_port }}'
    ds_type: 'influxdb'
    url: 'http://{{ ipaddress }}:{{ influxdb_port }}'
    database: '{{ project }}'
